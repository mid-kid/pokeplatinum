/* MSL
 * Copyright © 1995-2006 Freescale Corporation.  All rights reserved.
 *
 * $Date: 2006/02/09 16:59:28 $
 * $Revision: 1.15.2.2 $
 */

// stringfwd

#ifndef _STRINGFWD
#define _STRINGFWD

// WARNING
//
// stringfwd is a non-standard, non-portable header.
//
// WARNING

/*  stringfwd synopsis

	synopsis skipped.  Code self explanatory

*/

#include <mslconfig>

#ifndef RC_INVOKED

#ifdef __MWERKS__
#pragma options align=native
#endif

#ifdef _MSL_FORCE_ENUMS_ALWAYS_INT
	#if _MSL_FORCE_ENUMS_ALWAYS_INT
		#pragma enumsalwaysint on
	#else
		#pragma enumsalwaysint off
	#endif
#endif  // _MSL_FORCE_ENUMS_ALWAYS_INT

#ifdef _MSL_FORCE_ENABLE_BOOL_SUPPORT
	#if _MSL_FORCE_ENABLE_BOOL_SUPPORT
		#pragma bool on
	#else
		#pragma bool off
	#endif
#endif  // _MSL_FORCE_ENABLE_BOOL_SUPPORT

#ifndef _MSL_NO_CPP_NAMESPACE
	namespace std {
#endif

template <class T> class allocator;
template<class charT> struct char_traits;
template <class charT,
          class traits = char_traits<charT>,
          class Allocator = allocator<charT> > class basic_string;
typedef basic_string<char, char_traits<char>, allocator<char> > string;
#ifndef _MSL_NO_WCHART_CPP_SUPPORT
	typedef basic_string<wchar_t, char_traits<wchar_t>, allocator<wchar_t> > wstring;
#endif

#ifndef _MSL_NO_CPP_NAMESPACE
	}  // namespace std
#endif

#ifdef _MSL_FORCE_ENUMS_ALWAYS_INT
	#pragma enumsalwaysint reset
#endif

#ifdef _MSL_FORCE_ENABLE_BOOL_SUPPORT
	#pragma bool reset
#endif

#ifdef __MWERKS__
#pragma options align=reset
#endif

#endif  // RC_INVOKED

#endif // _STRINGFWD

// hh 991114 Created
// hh 010402 Removed 68K CMF support
